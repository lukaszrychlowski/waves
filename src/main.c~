#define GLFW_INCLUDE_NONE
#include <glad/gl.h>
#include <GLFW/glfw3.h>
#include <stdio.h>
#include <stdlib.h>


static void error_callback(int error, const char* description)
{
  fprintf(stderr, "Err: %s\n", description);
}

static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
  if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
    {
      glfwSetWindowShouldClose(window, GLFW_TRUE);
    }
}

static void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
  glViewport(0, 0, width, height);
}

int main()
{
  glfwInit();
  if (!glfwInit())
  {
    fprintf(stderr, "failed to init glfw");
    return -1;
  }

  //create window
  GLFWwindow* window = glfwCreateWindow(640, 480, "", NULL, NULL);

  if (!window)
   {
     glfwTerminate();
     return -1;
   }

  glfwMakeContextCurrent(window);

  //callbacks
  glfwSetErrorCallback(error_callback);
  glfwSetKeyCallback(window, key_callback);
  glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

  gladLoadGL(glfwGetProcAddress);
  
  //render loop
  while(!glfwWindowShouldClose(window))
    {
      glEnable(GL_DEPTH_TEST);
      glDepthFunc(GL_LESS);
      
      //handle window resized
      int width, height;
      glfwGetFramebufferSize(window, &width, &height);
      glViewport(0, 0, width, height);

      //bg color      
      glClearColor(0.2f, 0.3f, 0.4f, 1.0f);
      glClear(GL_COLOR_BUFFER_BIT);

      glfwSwapBuffers(window);
      glfwPollEvents();
    }
  
  glfwTerminate();
  return 0;
}

